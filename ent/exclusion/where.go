// Code generated by ent, DO NOT EDIT.

package exclusion

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/moq77111113/chmoly-santas/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldLTE(FieldID, id))
}

// GroupID applies equality check predicate on the "group_id" field. It's identical to GroupIDEQ.
func GroupID(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldGroupID, v))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldMemberID, v))
}

// ExcludeID applies equality check predicate on the "exclude_id" field. It's identical to ExcludeIDEQ.
func ExcludeID(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldExcludeID, v))
}

// GroupIDEQ applies the EQ predicate on the "group_id" field.
func GroupIDEQ(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldGroupID, v))
}

// GroupIDNEQ applies the NEQ predicate on the "group_id" field.
func GroupIDNEQ(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNEQ(FieldGroupID, v))
}

// GroupIDIn applies the In predicate on the "group_id" field.
func GroupIDIn(vs ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldIn(FieldGroupID, vs...))
}

// GroupIDNotIn applies the NotIn predicate on the "group_id" field.
func GroupIDNotIn(vs ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNotIn(FieldGroupID, vs...))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNotIn(FieldMemberID, vs...))
}

// ExcludeIDEQ applies the EQ predicate on the "exclude_id" field.
func ExcludeIDEQ(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldEQ(FieldExcludeID, v))
}

// ExcludeIDNEQ applies the NEQ predicate on the "exclude_id" field.
func ExcludeIDNEQ(v int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNEQ(FieldExcludeID, v))
}

// ExcludeIDIn applies the In predicate on the "exclude_id" field.
func ExcludeIDIn(vs ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldIn(FieldExcludeID, vs...))
}

// ExcludeIDNotIn applies the NotIn predicate on the "exclude_id" field.
func ExcludeIDNotIn(vs ...int) predicate.Exclusion {
	return predicate.Exclusion(sql.FieldNotIn(FieldExcludeID, vs...))
}

// HasGroup applies the HasEdge predicate on the "group" edge.
func HasGroup() predicate.Exclusion {
	return predicate.Exclusion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, GroupTable, GroupColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGroupWith applies the HasEdge predicate on the "group" edge with a given conditions (other predicates).
func HasGroupWith(preds ...predicate.Group) predicate.Exclusion {
	return predicate.Exclusion(func(s *sql.Selector) {
		step := newGroupStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasMember applies the HasEdge predicate on the "member" edge.
func HasMember() predicate.Exclusion {
	return predicate.Exclusion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, MemberTable, MemberColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMemberWith applies the HasEdge predicate on the "member" edge with a given conditions (other predicates).
func HasMemberWith(preds ...predicate.Member) predicate.Exclusion {
	return predicate.Exclusion(func(s *sql.Selector) {
		step := newMemberStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasExclude applies the HasEdge predicate on the "exclude" edge.
func HasExclude() predicate.Exclusion {
	return predicate.Exclusion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ExcludeTable, ExcludeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExcludeWith applies the HasEdge predicate on the "exclude" edge with a given conditions (other predicates).
func HasExcludeWith(preds ...predicate.Member) predicate.Exclusion {
	return predicate.Exclusion(func(s *sql.Selector) {
		step := newExcludeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Exclusion) predicate.Exclusion {
	return predicate.Exclusion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Exclusion) predicate.Exclusion {
	return predicate.Exclusion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Exclusion) predicate.Exclusion {
	return predicate.Exclusion(sql.NotPredicates(p))
}
