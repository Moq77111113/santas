// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/moq77111113/chmoly-santas/ent/exclusion"
	"github.com/moq77111113/chmoly-santas/ent/group"
	"github.com/moq77111113/chmoly-santas/ent/member"
	"github.com/moq77111113/chmoly-santas/ent/predicate"
)

// ExclusionUpdate is the builder for updating Exclusion entities.
type ExclusionUpdate struct {
	config
	hooks    []Hook
	mutation *ExclusionMutation
}

// Where appends a list predicates to the ExclusionUpdate builder.
func (eu *ExclusionUpdate) Where(ps ...predicate.Exclusion) *ExclusionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetGroupID sets the "group_id" field.
func (eu *ExclusionUpdate) SetGroupID(i int) *ExclusionUpdate {
	eu.mutation.SetGroupID(i)
	return eu
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (eu *ExclusionUpdate) SetNillableGroupID(i *int) *ExclusionUpdate {
	if i != nil {
		eu.SetGroupID(*i)
	}
	return eu
}

// SetMemberID sets the "member_id" field.
func (eu *ExclusionUpdate) SetMemberID(i int) *ExclusionUpdate {
	eu.mutation.SetMemberID(i)
	return eu
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (eu *ExclusionUpdate) SetNillableMemberID(i *int) *ExclusionUpdate {
	if i != nil {
		eu.SetMemberID(*i)
	}
	return eu
}

// SetExcludeID sets the "exclude_id" field.
func (eu *ExclusionUpdate) SetExcludeID(i int) *ExclusionUpdate {
	eu.mutation.SetExcludeID(i)
	return eu
}

// SetNillableExcludeID sets the "exclude_id" field if the given value is not nil.
func (eu *ExclusionUpdate) SetNillableExcludeID(i *int) *ExclusionUpdate {
	if i != nil {
		eu.SetExcludeID(*i)
	}
	return eu
}

// SetGroup sets the "group" edge to the Group entity.
func (eu *ExclusionUpdate) SetGroup(g *Group) *ExclusionUpdate {
	return eu.SetGroupID(g.ID)
}

// SetMember sets the "member" edge to the Member entity.
func (eu *ExclusionUpdate) SetMember(m *Member) *ExclusionUpdate {
	return eu.SetMemberID(m.ID)
}

// SetExclude sets the "exclude" edge to the Member entity.
func (eu *ExclusionUpdate) SetExclude(m *Member) *ExclusionUpdate {
	return eu.SetExcludeID(m.ID)
}

// Mutation returns the ExclusionMutation object of the builder.
func (eu *ExclusionUpdate) Mutation() *ExclusionMutation {
	return eu.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (eu *ExclusionUpdate) ClearGroup() *ExclusionUpdate {
	eu.mutation.ClearGroup()
	return eu
}

// ClearMember clears the "member" edge to the Member entity.
func (eu *ExclusionUpdate) ClearMember() *ExclusionUpdate {
	eu.mutation.ClearMember()
	return eu
}

// ClearExclude clears the "exclude" edge to the Member entity.
func (eu *ExclusionUpdate) ClearExclude() *ExclusionUpdate {
	eu.mutation.ClearExclude()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExclusionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, eu.sqlSave, eu.mutation, eu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExclusionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExclusionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExclusionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExclusionUpdate) check() error {
	if eu.mutation.GroupCleared() && len(eu.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Exclusion.group"`)
	}
	if eu.mutation.MemberCleared() && len(eu.mutation.MemberIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Exclusion.member"`)
	}
	if eu.mutation.ExcludeCleared() && len(eu.mutation.ExcludeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Exclusion.exclude"`)
	}
	return nil
}

func (eu *ExclusionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := eu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(exclusion.Table, exclusion.Columns, sqlgraph.NewFieldSpec(exclusion.FieldID, field.TypeInt))
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if eu.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.GroupTable,
			Columns: []string{exclusion.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.GroupTable,
			Columns: []string{exclusion.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.MemberTable,
			Columns: []string{exclusion.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.MemberTable,
			Columns: []string{exclusion.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.ExcludeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.ExcludeTable,
			Columns: []string{exclusion.ExcludeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.ExcludeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.ExcludeTable,
			Columns: []string{exclusion.ExcludeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exclusion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	eu.mutation.done = true
	return n, nil
}

// ExclusionUpdateOne is the builder for updating a single Exclusion entity.
type ExclusionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExclusionMutation
}

// SetGroupID sets the "group_id" field.
func (euo *ExclusionUpdateOne) SetGroupID(i int) *ExclusionUpdateOne {
	euo.mutation.SetGroupID(i)
	return euo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (euo *ExclusionUpdateOne) SetNillableGroupID(i *int) *ExclusionUpdateOne {
	if i != nil {
		euo.SetGroupID(*i)
	}
	return euo
}

// SetMemberID sets the "member_id" field.
func (euo *ExclusionUpdateOne) SetMemberID(i int) *ExclusionUpdateOne {
	euo.mutation.SetMemberID(i)
	return euo
}

// SetNillableMemberID sets the "member_id" field if the given value is not nil.
func (euo *ExclusionUpdateOne) SetNillableMemberID(i *int) *ExclusionUpdateOne {
	if i != nil {
		euo.SetMemberID(*i)
	}
	return euo
}

// SetExcludeID sets the "exclude_id" field.
func (euo *ExclusionUpdateOne) SetExcludeID(i int) *ExclusionUpdateOne {
	euo.mutation.SetExcludeID(i)
	return euo
}

// SetNillableExcludeID sets the "exclude_id" field if the given value is not nil.
func (euo *ExclusionUpdateOne) SetNillableExcludeID(i *int) *ExclusionUpdateOne {
	if i != nil {
		euo.SetExcludeID(*i)
	}
	return euo
}

// SetGroup sets the "group" edge to the Group entity.
func (euo *ExclusionUpdateOne) SetGroup(g *Group) *ExclusionUpdateOne {
	return euo.SetGroupID(g.ID)
}

// SetMember sets the "member" edge to the Member entity.
func (euo *ExclusionUpdateOne) SetMember(m *Member) *ExclusionUpdateOne {
	return euo.SetMemberID(m.ID)
}

// SetExclude sets the "exclude" edge to the Member entity.
func (euo *ExclusionUpdateOne) SetExclude(m *Member) *ExclusionUpdateOne {
	return euo.SetExcludeID(m.ID)
}

// Mutation returns the ExclusionMutation object of the builder.
func (euo *ExclusionUpdateOne) Mutation() *ExclusionMutation {
	return euo.mutation
}

// ClearGroup clears the "group" edge to the Group entity.
func (euo *ExclusionUpdateOne) ClearGroup() *ExclusionUpdateOne {
	euo.mutation.ClearGroup()
	return euo
}

// ClearMember clears the "member" edge to the Member entity.
func (euo *ExclusionUpdateOne) ClearMember() *ExclusionUpdateOne {
	euo.mutation.ClearMember()
	return euo
}

// ClearExclude clears the "exclude" edge to the Member entity.
func (euo *ExclusionUpdateOne) ClearExclude() *ExclusionUpdateOne {
	euo.mutation.ClearExclude()
	return euo
}

// Where appends a list predicates to the ExclusionUpdate builder.
func (euo *ExclusionUpdateOne) Where(ps ...predicate.Exclusion) *ExclusionUpdateOne {
	euo.mutation.Where(ps...)
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExclusionUpdateOne) Select(field string, fields ...string) *ExclusionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Exclusion entity.
func (euo *ExclusionUpdateOne) Save(ctx context.Context) (*Exclusion, error) {
	return withHooks(ctx, euo.sqlSave, euo.mutation, euo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExclusionUpdateOne) SaveX(ctx context.Context) *Exclusion {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExclusionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExclusionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExclusionUpdateOne) check() error {
	if euo.mutation.GroupCleared() && len(euo.mutation.GroupIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Exclusion.group"`)
	}
	if euo.mutation.MemberCleared() && len(euo.mutation.MemberIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Exclusion.member"`)
	}
	if euo.mutation.ExcludeCleared() && len(euo.mutation.ExcludeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Exclusion.exclude"`)
	}
	return nil
}

func (euo *ExclusionUpdateOne) sqlSave(ctx context.Context) (_node *Exclusion, err error) {
	if err := euo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(exclusion.Table, exclusion.Columns, sqlgraph.NewFieldSpec(exclusion.FieldID, field.TypeInt))
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Exclusion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, exclusion.FieldID)
		for _, f := range fields {
			if !exclusion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != exclusion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if euo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.GroupTable,
			Columns: []string{exclusion.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.GroupTable,
			Columns: []string{exclusion.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.MemberCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.MemberTable,
			Columns: []string{exclusion.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.MemberTable,
			Columns: []string{exclusion.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.ExcludeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.ExcludeTable,
			Columns: []string{exclusion.ExcludeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.ExcludeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.ExcludeTable,
			Columns: []string{exclusion.ExcludeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Exclusion{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{exclusion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	euo.mutation.done = true
	return _node, nil
}
