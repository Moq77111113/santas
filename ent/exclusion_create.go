// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/moq77111113/chmoly-santas/ent/exclusion"
	"github.com/moq77111113/chmoly-santas/ent/group"
	"github.com/moq77111113/chmoly-santas/ent/member"
)

// ExclusionCreate is the builder for creating a Exclusion entity.
type ExclusionCreate struct {
	config
	mutation *ExclusionMutation
	hooks    []Hook
}

// SetGroupID sets the "group_id" field.
func (ec *ExclusionCreate) SetGroupID(i int) *ExclusionCreate {
	ec.mutation.SetGroupID(i)
	return ec
}

// SetMemberID sets the "member_id" field.
func (ec *ExclusionCreate) SetMemberID(i int) *ExclusionCreate {
	ec.mutation.SetMemberID(i)
	return ec
}

// SetExcludeID sets the "exclude_id" field.
func (ec *ExclusionCreate) SetExcludeID(i int) *ExclusionCreate {
	ec.mutation.SetExcludeID(i)
	return ec
}

// SetGroup sets the "group" edge to the Group entity.
func (ec *ExclusionCreate) SetGroup(g *Group) *ExclusionCreate {
	return ec.SetGroupID(g.ID)
}

// SetMember sets the "member" edge to the Member entity.
func (ec *ExclusionCreate) SetMember(m *Member) *ExclusionCreate {
	return ec.SetMemberID(m.ID)
}

// SetExclude sets the "exclude" edge to the Member entity.
func (ec *ExclusionCreate) SetExclude(m *Member) *ExclusionCreate {
	return ec.SetExcludeID(m.ID)
}

// Mutation returns the ExclusionMutation object of the builder.
func (ec *ExclusionCreate) Mutation() *ExclusionMutation {
	return ec.mutation
}

// Save creates the Exclusion in the database.
func (ec *ExclusionCreate) Save(ctx context.Context) (*Exclusion, error) {
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExclusionCreate) SaveX(ctx context.Context) *Exclusion {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExclusionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExclusionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExclusionCreate) check() error {
	if _, ok := ec.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "Exclusion.group_id"`)}
	}
	if _, ok := ec.mutation.MemberID(); !ok {
		return &ValidationError{Name: "member_id", err: errors.New(`ent: missing required field "Exclusion.member_id"`)}
	}
	if _, ok := ec.mutation.ExcludeID(); !ok {
		return &ValidationError{Name: "exclude_id", err: errors.New(`ent: missing required field "Exclusion.exclude_id"`)}
	}
	if len(ec.mutation.GroupIDs()) == 0 {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "Exclusion.group"`)}
	}
	if len(ec.mutation.MemberIDs()) == 0 {
		return &ValidationError{Name: "member", err: errors.New(`ent: missing required edge "Exclusion.member"`)}
	}
	if len(ec.mutation.ExcludeIDs()) == 0 {
		return &ValidationError{Name: "exclude", err: errors.New(`ent: missing required edge "Exclusion.exclude"`)}
	}
	return nil
}

func (ec *ExclusionCreate) sqlSave(ctx context.Context) (*Exclusion, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *ExclusionCreate) createSpec() (*Exclusion, *sqlgraph.CreateSpec) {
	var (
		_node = &Exclusion{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(exclusion.Table, sqlgraph.NewFieldSpec(exclusion.FieldID, field.TypeInt))
	)
	if nodes := ec.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.GroupTable,
			Columns: []string{exclusion.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.MemberIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.MemberTable,
			Columns: []string{exclusion.MemberColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MemberID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.ExcludeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   exclusion.ExcludeTable,
			Columns: []string{exclusion.ExcludeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ExcludeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ExclusionCreateBulk is the builder for creating many Exclusion entities in bulk.
type ExclusionCreateBulk struct {
	config
	err      error
	builders []*ExclusionCreate
}

// Save creates the Exclusion entities in the database.
func (ecb *ExclusionCreateBulk) Save(ctx context.Context) ([]*Exclusion, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Exclusion, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExclusionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExclusionCreateBulk) SaveX(ctx context.Context) []*Exclusion {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExclusionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExclusionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
