// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/moq77111113/chmoly-santas/ent/exclusion"
	"github.com/moq77111113/chmoly-santas/ent/group"
	"github.com/moq77111113/chmoly-santas/ent/member"
)

// Exclusion is the model entity for the Exclusion schema.
type Exclusion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID int `json:"group_id,omitempty"`
	// MemberID holds the value of the "member_id" field.
	MemberID int `json:"member_id,omitempty"`
	// ExcludeID holds the value of the "exclude_id" field.
	ExcludeID int `json:"exclude_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExclusionQuery when eager-loading is set.
	Edges        ExclusionEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExclusionEdges holds the relations/edges for other nodes in the graph.
type ExclusionEdges struct {
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// Member holds the value of the member edge.
	Member *Member `json:"member,omitempty"`
	// Exclude holds the value of the exclude edge.
	Exclude *Member `json:"exclude,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExclusionEdges) GroupOrErr() (*Group, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExclusionEdges) MemberOrErr() (*Member, error) {
	if e.Member != nil {
		return e.Member, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: member.Label}
	}
	return nil, &NotLoadedError{edge: "member"}
}

// ExcludeOrErr returns the Exclude value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExclusionEdges) ExcludeOrErr() (*Member, error) {
	if e.Exclude != nil {
		return e.Exclude, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: member.Label}
	}
	return nil, &NotLoadedError{edge: "exclude"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exclusion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exclusion.FieldID, exclusion.FieldGroupID, exclusion.FieldMemberID, exclusion.FieldExcludeID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exclusion fields.
func (e *Exclusion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exclusion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case exclusion.FieldGroupID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value.Valid {
				e.GroupID = int(value.Int64)
			}
		case exclusion.FieldMemberID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_id", values[i])
			} else if value.Valid {
				e.MemberID = int(value.Int64)
			}
		case exclusion.FieldExcludeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exclude_id", values[i])
			} else if value.Valid {
				e.ExcludeID = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exclusion.
// This includes values selected through modifiers, order, etc.
func (e *Exclusion) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryGroup queries the "group" edge of the Exclusion entity.
func (e *Exclusion) QueryGroup() *GroupQuery {
	return NewExclusionClient(e.config).QueryGroup(e)
}

// QueryMember queries the "member" edge of the Exclusion entity.
func (e *Exclusion) QueryMember() *MemberQuery {
	return NewExclusionClient(e.config).QueryMember(e)
}

// QueryExclude queries the "exclude" edge of the Exclusion entity.
func (e *Exclusion) QueryExclude() *MemberQuery {
	return NewExclusionClient(e.config).QueryExclude(e)
}

// Update returns a builder for updating this Exclusion.
// Note that you need to call Exclusion.Unwrap() before calling this method if this Exclusion
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exclusion) Update() *ExclusionUpdateOne {
	return NewExclusionClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exclusion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exclusion) Unwrap() *Exclusion {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exclusion is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exclusion) String() string {
	var builder strings.Builder
	builder.WriteString("Exclusion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", e.GroupID))
	builder.WriteString(", ")
	builder.WriteString("member_id=")
	builder.WriteString(fmt.Sprintf("%v", e.MemberID))
	builder.WriteString(", ")
	builder.WriteString("exclude_id=")
	builder.WriteString(fmt.Sprintf("%v", e.ExcludeID))
	builder.WriteByte(')')
	return builder.String()
}

// Exclusions is a parsable slice of Exclusion.
type Exclusions []*Exclusion
